/**
 * Bot√£o Flutuante de Captura - BuscaLogo
 * 
 * Script otimizado para evitar travamentos do navegador
 * Implementa lazy loading e debouncing para melhor performance
 */

class BuscaLogoFloatingCapture {
  constructor() {
    this.isInitialized = false;
    this.isVisible = false;
    this.currentUrl = '';
    this.autoHideTimer = null;
    this.debounceTimer = null;
    this.settings = {
      enabled: true,
      autoHide: true,
      showTitle: true,
      hideDelay: 5000
    };
    
    // Bind methods para evitar problemas de contexto
    this.handleClick = this.handleClick.bind(this);
    this.handleMouseEnter = this.handleMouseEnter.bind(this);
    this.handleMouseLeave = this.handleMouseLeave.bind(this);
    
    // Inicializa√ß√£o lazy
    this.initLazy();
  }
  
  /**
   * Inicializa√ß√£o lazy para evitar sobrecarga
   */
  initLazy() {
    // Aguarda o DOM estar pronto
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.init());
    } else {
      // DOM j√° est√° pronto, inicializa com delay
      setTimeout(() => this.init(), 100);
    }
  }
  
  /**
   * Inicializa o bot√£o flutuante
   */
  async init() {
    if (this.isInitialized) return;
    
    try {
      console.log('üéØ Inicializando bot√£o flutuante de captura...');
      console.log('üéØ DOM ready state:', document.readyState);
      console.log('üéØ URL atual:', window.location.href);
      
      // Carrega configura√ß√µes
      await this.loadSettings();
      console.log('üéØ Configura√ß√µes carregadas:', this.settings);
      
      // Cria o bot√£o
      this.createButton();
      console.log('üéØ Bot√£o criado');
      
      // Configura observador de mudan√ßas de URL
      this.setupUrlObserver();
      console.log('üéØ Observador configurado');
      
      // Verifica p√°gina atual
      this.checkCurrentPage();
      console.log('üéØ P√°gina verificada');
      
      this.isInitialized = true;
      console.log('‚úÖ Bot√£o flutuante inicializado com sucesso');
      
    } catch (error) {
      console.error('‚ùå Erro ao inicializar bot√£o flutuante:', error);
    }
  }
  
  /**
   * Carrega configura√ß√µes do storage
   */
  async loadSettings() {
    try {
      const result = await chrome.storage.local.get(['floatingCaptureSettings']);
      if (result.floatingCaptureSettings) {
        this.settings = { ...this.settings, ...result.floatingCaptureSettings };
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao carregar configura√ß√µes, usando padr√µes');
    }
  }
  
  /**
   * Cria o bot√£o flutuante
   */
  createButton() {
    try {
      console.log('üéØ Criando bot√£o flutuante...');
      
      // Remove bot√£o existente se houver
      const existingButton = document.querySelector('.buscalogo-floating-capture');
      if (existingButton) {
        console.log('üéØ Removendo bot√£o existente');
        existingButton.remove();
      }
      
      // Verifica se o body existe
      if (!document.body) {
        console.error('‚ùå Body n√£o encontrado, aguardando...');
        setTimeout(() => this.createButton(), 100);
        return;
      }
      
      // Cria container
      const container = document.createElement('div');
      container.className = 'buscalogo-floating-capture hidden';
      container.id = 'buscalogo-floating-capture';
      
      // Cria bot√£o
      const button = document.createElement('button');
      button.className = 'buscalogo-capture-button';
      button.innerHTML = `
        <span class="buscalogo-capture-icon">üîç</span>
        <span class="buscalogo-capture-text">Capturar</span>
        <div class="buscalogo-capture-tooltip">Clique para capturar esta p√°gina</div>
      `;
      
      // Adiciona event listeners
      button.addEventListener('click', this.handleClick);
      button.addEventListener('mouseenter', this.handleMouseEnter);
      button.addEventListener('mouseleave', this.handleMouseLeave);
      
      // Adiciona ao DOM
      container.appendChild(button);
      document.body.appendChild(container);
      
      // Refer√™ncia para manipula√ß√£o
      this.container = container;
      this.button = button;
      
      console.log('üéØ Bot√£o criado e adicionado ao DOM');
      console.log('üéØ Container:', this.container);
      console.log('üéØ Button:', this.button);
      
    } catch (error) {
      console.error('‚ùå Erro ao criar bot√£o:', error);
    }
  }
  
  /**
   * Configura observador de mudan√ßas de URL
   */
  setupUrlObserver() {
    // Debounced para evitar m√∫ltiplas execu√ß√µes
    const debouncedCheck = () => {
      clearTimeout(this.debounceTimer);
      this.debounceTimer = setTimeout(() => {
        this.checkCurrentPage();
      }, 300);
    };
    
    // Observa mudan√ßas na URL
    let currentUrl = window.location.href;
    const observer = new MutationObserver(() => {
      if (window.location.href !== currentUrl) {
        currentUrl = window.location.href;
        debouncedCheck();
      }
    });
    
    // Observa mudan√ßas no body (para SPAs)
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
    
    // Tamb√©m escuta eventos de navega√ß√£o
    window.addEventListener('popstate', debouncedCheck);
    window.addEventListener('pushstate', debouncedCheck);
    window.addEventListener('replacestate', debouncedCheck);
  }
  
  /**
   * Verifica a p√°gina atual
   */
  async checkCurrentPage() {
    if (!this.isInitialized || !this.settings.enabled) return;
    
    try {
      const url = window.location.href;
      
      // Evita verificar a mesma URL
      if (url === this.currentUrl) return;
      this.currentUrl = url;
      
      // Verifica se √© uma p√°gina v√°lida
      if (!this.isValidPage(url)) {
        this.hide();
        return;
      }
      
      // Verifica se j√° foi capturada (com debouncing)
      clearTimeout(this.debounceTimer);
      this.debounceTimer = setTimeout(async () => {
        await this.checkPageStatus(url);
      }, 500);
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao verificar p√°gina:', error);
    }
  }
  
  /**
   * Verifica se a p√°gina √© v√°lida para captura
   */
  isValidPage(url) {
    try {
      const urlObj = new URL(url);
      return urlObj.protocol === 'http:' || urlObj.protocol === 'https:';
    } catch {
      return false;
    }
  }
  
  /**
   * Verifica status da p√°gina
   */
  async checkPageStatus(url) {
    try {
      // Envia mensagem para verificar se j√° foi capturada
      const response = await this.sendMessage('CHECK_PAGE_CAPTURED', { url });
      
      if (response && response.success) {
        if (response.isCaptured) {
          // Verifica se deve mostrar notifica√ß√£o de p√°gina j√° capturada
          if (response.showAlreadyCaptured === true) {
            this.showAlreadyCaptured();
          } else {
            console.log('üéØ BuscaLogo: Configura√ß√£o desabilita notifica√ß√£o de j√° capturada - n√£o mostrando nada');
          }
        } else {
          // Verifica se deve mostrar notifica√ß√£o de p√°gina n√£o capturada
          if (response.showNotCaptured === true) {
            this.show();
          } else {
            console.log('üéØ BuscaLogo: Configura√ß√£o desabilita notifica√ß√£o de n√£o capturada - n√£o mostrando nada');
          }
        }
      } else {
        // Se n√£o conseguir verificar, mostra por padr√£o
        this.show();
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao verificar status da p√°gina:', error);
      // Em caso de erro, mostra o bot√£o
      this.show();
    }
  }
  
  /**
   * Mostra o bot√£o
   */
  show() {
    if (!this.container || this.isVisible) return;
    
    this.isVisible = true;
    this.container.classList.remove('hidden');
    this.container.classList.add('entering');
    
    // Remove classe de entrada ap√≥s anima√ß√£o
    setTimeout(() => {
      this.container.classList.remove('entering');
    }, 500);
    
    // Auto-hide se configurado
    if (this.settings.autoHide) {
      this.startAutoHide();
    }
    
    console.log('üéØ Bot√£o flutuante exibido');
  }
  
  /**
   * Esconde o bot√£o
   */
  hide() {
    if (!this.container || !this.isVisible) return;
    
    this.isVisible = false;
    this.container.classList.add('hidden');
    this.stopAutoHide();
    
    console.log('üéØ Bot√£o flutuante ocultado');
  }
  
  /**
   * Mostra bot√£o como j√° capturado
   */
  showAlreadyCaptured() {
    if (!this.container || this.isVisible) return;
    
    this.isVisible = true;
    this.container.classList.remove('hidden');
    this.container.classList.add('entering');
    this.button.classList.add('already-captured');
    this.button.innerHTML = `
      <span class="buscalogo-capture-icon">‚úÖ</span>
      <span class="buscalogo-capture-text">J√° Capturada</span>
      <div class="buscalogo-capture-tooltip">Esta p√°gina j√° foi capturada</div>
    `;
    
    // Remove classe de entrada ap√≥s anima√ß√£o
    setTimeout(() => {
      this.container.classList.remove('entering');
    }, 500);
    
    console.log('üéØ Bot√£o flutuante exibido (j√° capturado)');
  }
  
  /**
   * Inicia timer de auto-hide
   */
  startAutoHide() {
    this.stopAutoHide();
    
    this.autoHideTimer = setTimeout(() => {
      if (this.isVisible && this.settings.autoHide) {
        this.container.classList.add('auto-hide');
        setTimeout(() => {
          this.hide();
        }, 5000);
      }
    }, this.settings.hideDelay);
  }
  
  /**
   * Para timer de auto-hide
   */
  stopAutoHide() {
    if (this.autoHideTimer) {
      clearTimeout(this.autoHideTimer);
      this.autoHideTimer = null;
    }
  }
  
  /**
   * Handler de clique no bot√£o
   */
  async handleClick(event) {
    event.preventDefault();
    event.stopPropagation();
    
    if (this.button.classList.contains('already-captured')) {
      return;
    }
    
    try {
      // Mostra estado de capturando
      this.button.classList.add('capturing');
      this.button.innerHTML = `
        <span class="buscalogo-capture-icon">‚è≥</span>
        <span class="buscalogo-capture-text">Capturando...</span>
      `;
      
      // Envia comando de captura
      const response = await this.sendMessage('CAPTURE_CURRENT_PAGE', {
        url: window.location.href,
        title: document.title
      });
      
      if (response && response.success) {
        // Sucesso - mostra como j√° capturado
        this.button.classList.remove('capturing');
        this.showAlreadyCaptured();
        
        // Notifica sucesso
        this.showNotification('‚úÖ P√°gina capturada com sucesso!');
        
      } else {
        throw new Error(response?.error || 'Erro desconhecido');
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao capturar p√°gina:', error);
      
      // Restaura bot√£o
      this.button.classList.remove('capturing');
      this.button.innerHTML = `
        <span class="buscalogo-capture-icon">üîç</span>
        <span class="buscalogo-capture-text">Capturar</span>
        <div class="buscalogo-capture-tooltip">Clique para capturar esta p√°gina</div>
      `;
      
      // Notifica erro
      this.showNotification('‚ùå Erro ao capturar p√°gina: ' + error.message);
    }
  }
  
  /**
   * Handler de mouse enter
   */
  handleMouseEnter() {
    this.stopAutoHide();
  }
  
  /**
   * Handler de mouse leave
   */
  handleMouseLeave() {
    if (this.settings.autoHide) {
      this.startAutoHide();
    }
  }
  
  /**
   * Envia mensagem para o background script
   */
  async sendMessage(type, data = {}) {
    try {
      return new Promise((resolve, reject) => {
        if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.sendMessage) {
          chrome.runtime.sendMessage({ type, data }, (response) => {
            if (chrome.runtime.lastError) {
              reject(new Error(chrome.runtime.lastError.message));
            } else {
              resolve(response);
            }
          });
        } else {
          reject(new Error('Chrome runtime n√£o dispon√≠vel'));
        }
      });
    } catch (error) {
      throw new Error('Erro ao enviar mensagem: ' + error.message);
    }
  }
  
  /**
   * Mostra notifica√ß√£o simples
   */
  showNotification(message) {
    try {
      // Cria notifica√ß√£o tempor√°ria
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed;
        top: 80px;
        right: 20px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 12px 16px;
        border-radius: 6px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 14px;
        z-index: 999998;
        animation: buscalogo-notification 3s ease-in-out forwards;
      `;
      notification.textContent = message;
      
      // Adiciona CSS da anima√ß√£o
      if (!document.querySelector('#buscalogo-notification-styles')) {
        const style = document.createElement('style');
        style.id = 'buscalogo-notification-styles';
        style.textContent = `
          @keyframes buscalogo-notification {
            0%, 20% { opacity: 0; transform: translateX(100px); }
            80% { opacity: 1; transform: translateX(0); }
            100% { opacity: 0; transform: translateX(100px); }
          }
        `;
        document.head.appendChild(style);
      }
      
      document.body.appendChild(notification);
      
      // Remove ap√≥s 3 segundos
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, 3000);
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao mostrar notifica√ß√£o:', error);
    }
  }
  
  /**
   * Atualiza configura√ß√µes
   */
  updateSettings(newSettings) {
    this.settings = { ...this.settings, ...newSettings };
    
    // Aplica mudan√ßas imediatamente
    if (!this.settings.enabled) {
      this.hide();
    } else {
      this.checkCurrentPage();
    }
  }
  
  /**
   * Destroi o bot√£o flutuante
   */
  destroy() {
    try {
      this.stopAutoHide();
      clearTimeout(this.debounceTimer);
      
      if (this.container && this.container.parentNode) {
        this.container.remove();
      }
      
      this.isInitialized = false;
      this.isVisible = false;
      
      console.log('üéØ Bot√£o flutuante destru√≠do');
      
    } catch (error) {
      console.error('‚ùå Erro ao destruir bot√£o flutuante:', error);
    }
  }
}

// Inicializa quando o script √© carregado
let floatingCapture = null;

// Fun√ß√£o global para inicializa√ß√£o
window.initBuscaLogoFloatingCapture = () => {
  console.log('üéØ BuscaLogo: Fun√ß√£o global chamada');
  if (!floatingCapture) {
    console.log('üéØ BuscaLogo: Criando nova inst√¢ncia');
    floatingCapture = new BuscaLogoFloatingCapture();
  } else {
    console.log('üéØ BuscaLogo: Usando inst√¢ncia existente');
  }
  return floatingCapture;
};

// Garante que a fun√ß√£o global est√° dispon√≠vel
console.log('üéØ BuscaLogo: Script carregado, fun√ß√£o global definida:', !!window.initBuscaLogoFloatingCapture);

// Auto-inicializa√ß√£o com delay para evitar sobrecarga
setTimeout(() => {
  console.log('üéØ BuscaLogo: Tentando auto-inicializa√ß√£o...');
  if (document.readyState === 'complete') {
    console.log('üéØ BuscaLogo: DOM completo, inicializando...');
    window.initBuscaLogoFloatingCapture();
  } else {
    console.log('üéØ BuscaLogo: Aguardando DOM completo...');
    window.addEventListener('load', () => {
      console.log('üéØ BuscaLogo: DOM carregado, inicializando...');
      window.initBuscaLogoFloatingCapture();
    });
  }
}, 1000);

// Tamb√©m tenta inicializar quando o script √© carregado
if (document.readyState === 'complete') {
  setTimeout(() => {
    console.log('üéØ BuscaLogo: Tentando inicializa√ß√£o imediata...');
    if (window.initBuscaLogoFloatingCapture) {
      window.initBuscaLogoFloatingCapture();
    }
  }, 100);
}

// Exporta para uso externo
if (typeof module !== 'undefined' && module.exports) {
  module.exports = BuscaLogoFloatingCapture;
}
